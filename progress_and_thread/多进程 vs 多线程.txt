多进程 vs 多线程

多进程：
     优点：
       1. 每个进程独享自己的资源，不存在并发问题
       2. 每个进程独享自己的资源，即使一个进程挂了，也不会影响其他的进程（除非主进程挂了，但是主进程是分配任务的，一般不会挂）
       3. 帮助你避免CPython的GIL限制(仅仅针对 python 而言)
     缺点：
       1. linux, max os 基于 系统的 fork，创建成本大
       2. windows 没有 fork，创建新的进程，开销更大
       3. 进程间通信成本高

多线程：
      优点：
        1. 轻量级、创建开销相对较小
        2. 线程之间的通信成本很低
      缺点：
        1. 并发问题，线程安全，编程复杂
        2. 线程共享进程内的资源，会相互影响
        3. 在java中，线程内部的资源（例如操作线程内部的局部变量）导致oom，JVM 不会崩溃，因为线程崩溃，该线程占用的资源就可以被回收；
                    线程外部的资源（例如操作static变量）导致oom，JVM 会崩溃；


CPU 密集型任务 vs IO 密集型任务

CPU 密集型任务：
    举例：计算圆周率，编解码
    线程数推荐值：threadNum = core num + 1

IO  密集型任务：
    举例：web 服务，绝大多数服务
    线程数推荐值：threadNum = 2 × core num + 1
    特点：绝大多数时间都消耗在了等待上


异步IO：
  当操作系统支持异步IO之后，可以使用单线程、单进程处理IO密集型任务
  现代操作系统对IO操作已经做了巨大的改进，最大的特点就是支持异步IO。
  如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型，Nginx就是支持异步IO的Web服务器，
  它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。
  由于系统总的进程数量十分有限，因此操作系统调度非常高效。用异步IO编程模型来实现多任务是一个主要的趋势。
  对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。我们会在后面讨论如何编写协程